import matplotlib.pyplot as plt
import networkx as nx
import sys
import scipy as sp
from networkx.generators.expanders import *
import itertools

n=int(input("enter n value"))
i=int(input("enter i value"))

if i == 1:
	m=int(input("enter m value"))
	G =  nx.dense_gnm_random_graph(n,m)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("dense_gnm_random_graph\%d_%d.txt"%(n,m),'w'))
	nx.draw(G)
	plt.show()	
elif i == 2:
	m=int(input("enter m value"))
	G =  nx.gnm_random_graph(n,m)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("gnm_random_graph\%d_%d.txt"%(n,m),'w'))
	nx.draw(G)
	plt.show()
elif i == 3:
	m=int(input("enter m value"))
	p=float(input("enter p value"))
	G =  nx.powerlaw_cluster_graph(n,m,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("powerlaw_cluster_graph\%d_%d.txt"%(n,m),'w'))
	nx.draw(G)
	plt.show()
elif i == 4:
	p=float(input("enter p value"))
	G =  nx.binomial_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("binomial_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 5:
	m=int(input("enter m value"))
	G =  nx.barabasi_albert_graph(n,m)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("barabasi_albert_graph\%d_%d.txt"%(n,m),'w'))
	nx.draw(G)
	plt.show()
elif i == 6:
	p=float(input("enter p value"))
	k=int(input("enter k value"))
	G =  nx.watts_strogatz_graph(n,k,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("watts_strogatz_graph\%d_%d_%f.txt"%(n,k,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 7:
	print("n*d must be even")
	d=int(input("enter d value"))
	G =  nx.random_regular_graph(d,n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("random_regular_graph\%d_%d.txt"%(d,n),'w'))
	nx.draw(G)
	plt.show()
elif i == 8:
	p=float(input("enter p value"))
	G =  nx.duplication_divergence_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("duplication_divergence_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 9:
	p=float(input("enter p value"))
	k=int(input("enter k value"))
	G =  nx.connected_watts_strogatz_graph(n,k,p,tries=100)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("connected_watts_strogatz_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 10:
	m1=int(input("enter m1 value"))
	m2=int(input("enter m2 value"))
	p=float(input("enter p value"))
	G =  nx.dual_barabasi_albert_graph(n,m1,m2,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("dual_barabasi_albert_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 11:
	p=float(input("enter p value"))
	G =  nx.fast_gnp_random_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("fast_gnp_random_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 12:
	p=float(input("enter p value"))
	G =  nx.erdos_renyi_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("erdos_renyi_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 13:
	p=float(input("enter p value"))
	G =  nx.gnp_random_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("gnp_random_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 14:
	p=float(input("enter p value"))
	k=int(input("enter k value"))
	G =  nx.newman_watts_strogatz_graph(n,k,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("newman_watts_strogatz_graph\%d_%d_%f.txt"%(n,k,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 15:
	p=float(input("enter p value"))
	q=float(input("enter q value"))
	m=int(input("enter m value"))
	G =  nx.extended_barabasi_albert_graph(n,m,p,q)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("extended_barabasi_albert_graph\%d_%d_%f_%f.txt"%(n,m,p,q),'w'))
	nx.draw(G)
	plt.show()
elif i == 16:
	G =  nx.circular_ladder_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("circular_ladder_graph\%d.txt"%(2*n),'w'))
	nx.draw(G)
	plt.show()
elif i == 17:
	G =  nx.cycle_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("cycle_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 18:
	G =  nx.ladder_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("ladder_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 19:
	G =  nx.path_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("path_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 20:
	G =  nx.star_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("star_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 21:
	G =  nx.wheel_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("wheel_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 22:
	p=float(input("enter p value"))
	G =  nx.gnr_graph(n,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("gnr_graph\%d_%f.txt"%(n,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 23:
	G =  nx.hypercube_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("hypercube_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 24:
	G =  nx.gnc_graph(n)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("gnc_graph\%d.txt"%(n),'w'))
	nx.draw(G)
	plt.show()
elif i == 25:
	l=int(input("enter l value"))
	k=int(input("enter k value"))
	G =  nx.caveman_graph(l,k)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("caveman_graph\%d_%d.txt"%(l,k),'w'))
	nx.draw(G)
	plt.show()
elif i == 26:
	l=int(input("enter l value"))
	k=int(input("enter k value"))
	G =  nx.connected_caveman_graph(l,k)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("connected_caveman_graph\%d_%d.txt"%(l,k),'w'))
	nx.draw(G)
	plt.show()
elif i == 27:
	l=int(input("enter l value"))
	k=int(input("enter k value"))
	p=float(input("enter p value"))
	G =  nx.relaxed_caveman_graph(l,k,p)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("relaxed_caveman_graph\%d_%d_%f.txt"%(l,k,p),'w'))
	nx.draw(G)
	plt.show()
elif i == 28:
	l=int(input("enter l value"))
	k=int(input("enter k value"))
	p_in=float(input("enter p_in value"))
	p_out=float(input("enter p_out value"))
	G =  nx.planted_partition_graph(l,k,p_in, p_out)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("planted_partition_graph\%d_%d_%f_%f.txt"%(l,k,p_in, p_out),'w'))
	nx.draw(G)
	plt.show()
elif i == 29:
	num_cliques=int(input("enter num_cliques value"))
	clique_size=int(input("enter clique_size value"))
	G =  nx.ring_of_cliques(num_cliques,clique_size)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("ring_of_cliques\%d_%d.txt"%(num_cliques,clique_size),'w'))
	nx.draw(G)
	plt.show()
elif i == 30:
	k=int(input("enter k value"))
	G =  nx.windmill_graph(n,k)
	print(nx.info(G))
	A = nx.adjacency_matrix(G)
	sp.set_printoptions(linewidth=sp.inf)
	sp.set_printoptions(threshold=sys.maxsize)
	print(A.todense(),file=open("windmill_graph\%d_%d.txt"%(n,k),'w'))
	nx.draw(G)
	plt.show()




